{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rauna\\\\OneDrive\\\\Desktop\\\\v1.0\\\\staff-portal\\\\src\\\\utils\\\\auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Staff credentials (in production, this would come from your backend)\n  const staffCredentials = {\n    admin: [{\n      email: 'admin@healthcare.com',\n      password: 'admin123',\n      name: 'Admin User',\n      role: 'admin'\n    }, {\n      email: 'admin2@healthcare.com',\n      password: 'admin456',\n      name: 'Admin Manager',\n      role: 'admin'\n    }],\n    doctor: [{\n      email: 'doctor@healthcare.com',\n      password: 'doctor123',\n      name: 'Dr. Smith',\n      role: 'doctor',\n      specialization: 'Cardiology'\n    }, {\n      email: 'doctor2@healthcare.com',\n      password: 'doctor456',\n      name: 'Dr. Johnson',\n      role: 'doctor',\n      specialization: 'Neurology'\n    }],\n    nurse: [{\n      email: 'nurse@healthcare.com',\n      password: 'nurse123',\n      name: 'Nurse Williams',\n      role: 'nurse',\n      department: 'Emergency'\n    }, {\n      email: 'nurse2@healthcare.com',\n      password: 'nurse456',\n      name: 'Nurse Brown',\n      role: 'nurse',\n      department: 'ICU'\n    }],\n    receptionist: [{\n      email: 'receptionist@healthcare.com',\n      password: 'receptionist123',\n      name: 'Receptionist Davis',\n      role: 'receptionist'\n    }, {\n      email: 'receptionist2@healthcare.com',\n      password: 'receptionist456',\n      name: 'Receptionist Wilson',\n      role: 'receptionist'\n    }],\n    pharmacist: [{\n      email: 'pharmacist@healthcare.com',\n      password: 'pharmacist123',\n      name: 'Pharmacist Taylor',\n      role: 'pharmacist'\n    }, {\n      email: 'pharmacist2@healthcare.com',\n      password: 'pharmacist456',\n      name: 'Pharmacist Anderson',\n      role: 'pharmacist'\n    }]\n  };\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const savedUser = localStorage.getItem('staffUser');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setLoading(true);\n\n    // Find user in staff credentials\n    let foundUser = null;\n    for (const role in staffCredentials) {\n      const user = staffCredentials[role].find(u => u.email === email && u.password === password);\n      if (user) {\n        foundUser = user;\n        break;\n      }\n    }\n    if (foundUser) {\n      const userData = {\n        ...foundUser,\n        id: Date.now(),\n        // Simple ID generation\n        loginTime: new Date().toISOString()\n      };\n      setUser(userData);\n      localStorage.setItem('staffUser', JSON.stringify(userData));\n      setLoading(false);\n      return {\n        success: true,\n        user: userData\n      };\n    } else {\n      setLoading(false);\n      return {\n        success: false,\n        message: 'Invalid credentials. Only authorized staff can access this portal.'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('staffUser');\n  };\n  const hasRole = allowedRoles => {\n    if (!user) return false;\n    if (!allowedRoles || allowedRoles.length === 0) return true;\n    return allowedRoles.includes(user.role);\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    hasRole,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","staffCredentials","admin","email","password","name","role","doctor","specialization","nurse","department","receptionist","pharmacist","savedUser","localStorage","getItem","JSON","parse","login","foundUser","find","u","userData","id","Date","now","loginTime","toISOString","setItem","stringify","success","message","logout","removeItem","hasRole","allowedRoles","length","includes","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rauna/OneDrive/Desktop/v1.0/staff-portal/src/utils/auth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Staff credentials (in production, this would come from your backend)\r\n  const staffCredentials = {\r\n    admin: [\r\n      { email: 'admin@healthcare.com', password: 'admin123', name: 'Admin User', role: 'admin' },\r\n      { email: 'admin2@healthcare.com', password: 'admin456', name: 'Admin Manager', role: 'admin' }\r\n    ],\r\n    doctor: [\r\n      { email: 'doctor@healthcare.com', password: 'doctor123', name: 'Dr. Smith', role: 'doctor', specialization: 'Cardiology' },\r\n      { email: 'doctor2@healthcare.com', password: 'doctor456', name: 'Dr. Johnson', role: 'doctor', specialization: 'Neurology' }\r\n    ],\r\n    nurse: [\r\n      { email: 'nurse@healthcare.com', password: 'nurse123', name: 'Nurse Williams', role: 'nurse', department: 'Emergency' },\r\n      { email: 'nurse2@healthcare.com', password: 'nurse456', name: 'Nurse Brown', role: 'nurse', department: 'ICU' }\r\n    ],\r\n    receptionist: [\r\n      { email: 'receptionist@healthcare.com', password: 'receptionist123', name: 'Receptionist Davis', role: 'receptionist' },\r\n      { email: 'receptionist2@healthcare.com', password: 'receptionist456', name: 'Receptionist Wilson', role: 'receptionist' }\r\n    ],\r\n    pharmacist: [\r\n      { email: 'pharmacist@healthcare.com', password: 'pharmacist123', name: 'Pharmacist Taylor', role: 'pharmacist' },\r\n      { email: 'pharmacist2@healthcare.com', password: 'pharmacist456', name: 'Pharmacist Anderson', role: 'pharmacist' }\r\n    ]\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on app start\r\n    const savedUser = localStorage.getItem('staffUser');\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    \r\n    // Find user in staff credentials\r\n    let foundUser = null;\r\n    for (const role in staffCredentials) {\r\n      const user = staffCredentials[role].find(u => u.email === email && u.password === password);\r\n      if (user) {\r\n        foundUser = user;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (foundUser) {\r\n      const userData = {\r\n        ...foundUser,\r\n        id: Date.now(), // Simple ID generation\r\n        loginTime: new Date().toISOString()\r\n      };\r\n      \r\n      setUser(userData);\r\n      localStorage.setItem('staffUser', JSON.stringify(userData));\r\n      setLoading(false);\r\n      return { success: true, user: userData };\r\n    } else {\r\n      setLoading(false);\r\n      return { success: false, message: 'Invalid credentials. Only authorized staff can access this portal.' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('staffUser');\r\n  };\r\n\r\n  const hasRole = (allowedRoles) => {\r\n    if (!user) return false;\r\n    if (!allowedRoles || allowedRoles.length === 0) return true;\r\n    return allowedRoles.includes(user.role);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading,\r\n    hasRole,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}