{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rauna\\\\OneDrive\\\\Desktop\\\\v1.0\\\\staff-portal\\\\src\\\\utils\\\\auth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst API_BASE_URL = 'http://localhost:5000/api';\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const savedUser = localStorage.getItem('staffUser');\n    const savedToken = localStorage.getItem('staffToken');\n    if (savedUser && savedToken) {\n      try {\n        const userData = JSON.parse(savedUser);\n        setUser(userData);\n      } catch (error) {\n        console.error('Error parsing saved user:', error);\n        localStorage.removeItem('staffUser');\n        localStorage.removeItem('staffToken');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setLoading(true);\n    try {\n      const response = await axios.post(`${API_BASE_URL}/staff/auth/login`, {\n        email,\n        password\n      });\n      if (response.data.token) {\n        const userData = {\n          ...response.data.user,\n          loginTime: new Date().toISOString()\n        };\n\n        // Store token and user data\n        localStorage.setItem('staffToken', response.data.token);\n        localStorage.setItem('staffUser', JSON.stringify(userData));\n        setUser(userData);\n        setLoading(false);\n        return {\n          success: true,\n          user: userData\n        };\n      }\n    } catch (error) {\n      var _error$response;\n      setLoading(false);\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        return {\n          success: false,\n          message: 'Invalid credentials. Only authorized staff can access this portal.'\n        };\n      } else {\n        return {\n          success: false,\n          message: 'Login failed. Please try again.'\n        };\n      }\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('staffUser');\n    localStorage.removeItem('staffToken');\n  };\n  const hasRole = allowedRoles => {\n    if (!user) return false;\n    if (!allowedRoles || allowedRoles.length === 0) return true;\n    return allowedRoles.includes(user.role);\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    hasRole,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","API_BASE_URL","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","savedUser","localStorage","getItem","savedToken","userData","JSON","parse","error","console","removeItem","login","email","password","response","post","data","token","loginTime","Date","toISOString","setItem","stringify","success","_error$response","status","message","logout","hasRole","allowedRoles","length","includes","role","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rauna/OneDrive/Desktop/v1.0/staff-portal/src/utils/auth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on app start\r\n    const savedUser = localStorage.getItem('staffUser');\r\n    const savedToken = localStorage.getItem('staffToken');\r\n    \r\n    if (savedUser && savedToken) {\r\n      try {\r\n        const userData = JSON.parse(savedUser);\r\n        setUser(userData);\r\n      } catch (error) {\r\n        console.error('Error parsing saved user:', error);\r\n        localStorage.removeItem('staffUser');\r\n        localStorage.removeItem('staffToken');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/staff/auth/login`, {\r\n        email,\r\n        password\r\n      });\r\n\r\n      if (response.data.token) {\r\n        const userData = {\r\n          ...response.data.user,\r\n          loginTime: new Date().toISOString()\r\n        };\r\n        \r\n        // Store token and user data\r\n        localStorage.setItem('staffToken', response.data.token);\r\n        localStorage.setItem('staffUser', JSON.stringify(userData));\r\n        \r\n        setUser(userData);\r\n        setLoading(false);\r\n        return { success: true, user: userData };\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      if (error.response?.status === 401) {\r\n        return { success: false, message: 'Invalid credentials. Only authorized staff can access this portal.' };\r\n      } else {\r\n        return { success: false, message: 'Login failed. Please try again.' };\r\n      }\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('staffUser');\r\n    localStorage.removeItem('staffToken');\r\n  };\r\n\r\n  const hasRole = (allowedRoles) => {\r\n    if (!user) return false;\r\n    if (!allowedRoles || allowedRoles.length === 0) return true;\r\n    return allowedRoles.includes(user.role);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading,\r\n    hasRole,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}