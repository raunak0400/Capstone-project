{"ast":null,"code":"import _objectSpread from\"C:/Users/rauna/OneDrive/Desktop/v1.0/staff-portal/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);// Staff credentials (in production, this would come from your backend)\nconst staffCredentials={admin:[{email:'admin@healthcare.com',password:'admin123',name:'Admin User',role:'admin'},{email:'admin2@healthcare.com',password:'admin456',name:'Admin Manager',role:'admin'}],doctor:[{email:'doctor@healthcare.com',password:'doctor123',name:'Dr. Smith',role:'doctor',specialization:'Cardiology'},{email:'doctor2@healthcare.com',password:'doctor456',name:'Dr. Johnson',role:'doctor',specialization:'Neurology'}],nurse:[{email:'nurse@healthcare.com',password:'nurse123',name:'Nurse Williams',role:'nurse',department:'Emergency'},{email:'nurse2@healthcare.com',password:'nurse456',name:'Nurse Brown',role:'nurse',department:'ICU'}],receptionist:[{email:'receptionist@healthcare.com',password:'receptionist123',name:'Receptionist Davis',role:'receptionist'},{email:'receptionist2@healthcare.com',password:'receptionist456',name:'Receptionist Wilson',role:'receptionist'}],pharmacist:[{email:'pharmacist@healthcare.com',password:'pharmacist123',name:'Pharmacist Taylor',role:'pharmacist'},{email:'pharmacist2@healthcare.com',password:'pharmacist456',name:'Pharmacist Anderson',role:'pharmacist'}]};useEffect(()=>{// Check if user is logged in on app start\nconst savedUser=localStorage.getItem('staffUser');if(savedUser){setUser(JSON.parse(savedUser));}setLoading(false);},[]);const login=async(email,password)=>{setLoading(true);// Find user in staff credentials\nlet foundUser=null;for(const role in staffCredentials){const user=staffCredentials[role].find(u=>u.email===email&&u.password===password);if(user){foundUser=user;break;}}if(foundUser){const userData=_objectSpread(_objectSpread({},foundUser),{},{id:Date.now(),// Simple ID generation\nloginTime:new Date().toISOString()});setUser(userData);localStorage.setItem('staffUser',JSON.stringify(userData));setLoading(false);return{success:true,user:userData};}else{setLoading(false);return{success:false,message:'Invalid credentials. Only authorized staff can access this portal.'};}};const logout=()=>{setUser(null);localStorage.removeItem('staffUser');};const hasRole=allowedRoles=>{if(!user)return false;if(!allowedRoles||allowedRoles.length===0)return true;return allowedRoles.includes(user.role);};const value={user,login,logout,loading,hasRole,isAuthenticated:!!user};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","staffCredentials","admin","email","password","name","role","doctor","specialization","nurse","department","receptionist","pharmacist","savedUser","localStorage","getItem","JSON","parse","login","foundUser","find","u","userData","_objectSpread","id","Date","now","loginTime","toISOString","setItem","stringify","success","message","logout","removeItem","hasRole","allowedRoles","length","includes","value","isAuthenticated","Provider"],"sources":["C:/Users/rauna/OneDrive/Desktop/v1.0/staff-portal/src/utils/auth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Staff credentials (in production, this would come from your backend)\r\n  const staffCredentials = {\r\n    admin: [\r\n      { email: 'admin@healthcare.com', password: 'admin123', name: 'Admin User', role: 'admin' },\r\n      { email: 'admin2@healthcare.com', password: 'admin456', name: 'Admin Manager', role: 'admin' }\r\n    ],\r\n    doctor: [\r\n      { email: 'doctor@healthcare.com', password: 'doctor123', name: 'Dr. Smith', role: 'doctor', specialization: 'Cardiology' },\r\n      { email: 'doctor2@healthcare.com', password: 'doctor456', name: 'Dr. Johnson', role: 'doctor', specialization: 'Neurology' }\r\n    ],\r\n    nurse: [\r\n      { email: 'nurse@healthcare.com', password: 'nurse123', name: 'Nurse Williams', role: 'nurse', department: 'Emergency' },\r\n      { email: 'nurse2@healthcare.com', password: 'nurse456', name: 'Nurse Brown', role: 'nurse', department: 'ICU' }\r\n    ],\r\n    receptionist: [\r\n      { email: 'receptionist@healthcare.com', password: 'receptionist123', name: 'Receptionist Davis', role: 'receptionist' },\r\n      { email: 'receptionist2@healthcare.com', password: 'receptionist456', name: 'Receptionist Wilson', role: 'receptionist' }\r\n    ],\r\n    pharmacist: [\r\n      { email: 'pharmacist@healthcare.com', password: 'pharmacist123', name: 'Pharmacist Taylor', role: 'pharmacist' },\r\n      { email: 'pharmacist2@healthcare.com', password: 'pharmacist456', name: 'Pharmacist Anderson', role: 'pharmacist' }\r\n    ]\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on app start\r\n    const savedUser = localStorage.getItem('staffUser');\r\n    if (savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    \r\n    // Find user in staff credentials\r\n    let foundUser = null;\r\n    for (const role in staffCredentials) {\r\n      const user = staffCredentials[role].find(u => u.email === email && u.password === password);\r\n      if (user) {\r\n        foundUser = user;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (foundUser) {\r\n      const userData = {\r\n        ...foundUser,\r\n        id: Date.now(), // Simple ID generation\r\n        loginTime: new Date().toISOString()\r\n      };\r\n      \r\n      setUser(userData);\r\n      localStorage.setItem('staffUser', JSON.stringify(userData));\r\n      setLoading(false);\r\n      return { success: true, user: userData };\r\n    } else {\r\n      setLoading(false);\r\n      return { success: false, message: 'Invalid credentials. Only authorized staff can access this portal.' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('staffUser');\r\n  };\r\n\r\n  const hasRole = (allowedRoles) => {\r\n    if (!user) return false;\r\n    if (!allowedRoles || allowedRoles.length === 0) return true;\r\n    return allowedRoles.includes(user.role);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading,\r\n    hasRole,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}