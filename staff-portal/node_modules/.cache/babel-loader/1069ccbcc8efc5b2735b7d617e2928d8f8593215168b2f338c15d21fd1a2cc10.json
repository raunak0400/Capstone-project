{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rauna\\\\OneDrive\\\\Desktop\\\\v1.0\\\\staff-portal\\\\src\\\\pages\\\\DoctorMain\\\\Appointments.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, ListGroup, Badge } from \"react-bootstrap\";\n\n// ----------------- Mock Data -----------------\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockDoctor = {\n  id: \"123\",\n  name: \"John Doe\",\n  specialization: \"Cardiology\",\n  email: \"john.doe@example.com\"\n};\nconst mockAppointments = [{\n  id: 1,\n  patientName: \"Alice Smith\",\n  time: \"09:00 AM\",\n  status: \"Confirmed\"\n}, {\n  id: 2,\n  patientName: \"Bob Johnson\",\n  time: \"10:30 AM\",\n  status: \"Pending\"\n}, {\n  id: 3,\n  patientName: \"Charlie Brown\",\n  time: \"01:00 PM\",\n  status: \"Completed\"\n}, {\n  id: 1,\n  patientName: \"Alice Smith\",\n  time: \"09:00 AM\",\n  status: \"Confirmed\"\n}, {\n  id: 2,\n  patientName: \"Bob Johnson\",\n  time: \"10:30 AM\",\n  status: \"Pending\"\n}, {\n  id: 3,\n  patientName: \"Charlie Brown\",\n  time: \"01:00 PM\",\n  status: \"Completed\"\n}];\nconst mockStats = {\n  appointments: 3,\n  patients: 25,\n  pendingReports: 2\n};\nconst mockPatients = [{\n  id: \"p1\",\n  firstName: \"Alice\",\n  lastName: \"Smith\",\n  dateOfBirth: \"1990-05-12\",\n  gender: \"female\",\n  phone: \"1234567890\",\n  email: \"alice@example.com\",\n  address: \"123 Street, City\",\n  bloodType: \"A+\",\n  emergencyContact: {\n    name: \"Bob Smith\",\n    relationship: \"Spouse\",\n    phone: \"0987654321\"\n  },\n  medicalHistory: [\"Diabetes\", \"Hypertension\"],\n  allergies: [\"Penicillin\", \"Peanuts\"],\n  medications: [\"Metformin\", \"Aspirin\"],\n  insurance: {\n    provider: \"HealthCare Inc.\",\n    policyNumber: \"HC12345\",\n    groupNumber: \"G123\"\n  },\n  status: \"active\"\n}, {\n  id: \"p2\",\n  firstName: \"John\",\n  lastName: \"Doe\",\n  dateOfBirth: \"1985-08-20\",\n  gender: \"male\",\n  phone: \"9876543210\",\n  email: \"john@example.com\",\n  address: \"456 Avenue, City\",\n  bloodType: \"B+\",\n  emergencyContact: {\n    name: \"Jane Doe\",\n    relationship: \"Spouse\",\n    phone: \"1234567890\"\n  },\n  medicalHistory: [\"Asthma\"],\n  allergies: [\"None\"],\n  medications: [\"Albuterol\"],\n  insurance: {\n    provider: \"HealthFirst\",\n    policyNumber: \"HF67890\",\n    groupNumber: \"G678\"\n  },\n  status: \"active\"\n}];\nconst mockNotifications = [{\n  id: 1,\n  message: \"New lab report submitted for Alice Smith.\",\n  type: \"info\"\n}, {\n  id: 2,\n  message: \"Appointment canceled by Bob Johnson.\",\n  type: \"warning\"\n}];\n\n// ----------------- Dashboard Component -----------------\nconst DoctorDashboard = () => {\n  _s();\n  const [doctor, setDoctor] = useState(null);\n  const [appointments, setAppointments] = useState([]);\n  const [stats, setStats] = useState({});\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    // Simulate API call\n    const fetchData = async () => {\n      setDoctor(mockDoctor);\n      setAppointments(mockAppointments);\n      setStats(mockStats);\n      setNotifications(mockNotifications);\n    };\n    fetchData();\n  }, []);\n\n  // Function to get badge color based on status/type\n  const getBadgeColor = status => {\n    switch (status) {\n      case \"Confirmed\":\n      case \"info\":\n        return \"primary\";\n      case \"Pending\":\n      case \"warning\":\n        return \"warning\";\n      case \"Completed\":\n        return \"success\";\n      default:\n        return \"secondary\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-4\",\n      children: \"Appointment List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: \"Today's Appointments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        variant: \"flush\",\n        children: appointments.length > 0 ? appointments.map(appt => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          className: \"d-flex justify-content-between align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Patient:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this), \" \", appt.patientName, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 82\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"Time: \", appt.time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Badge, {\n            bg: getBadgeColor(appt.status),\n            children: appt.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 33\n          }, this)]\n        }, appt.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: \"No appointments today\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n_s(DoctorDashboard, \"OvM20sdEYdn58qcuCri+IvmcMBI=\");\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useEffect","useState","Container","Row","Col","Card","ListGroup","Badge","jsxDEV","_jsxDEV","mockDoctor","id","name","specialization","email","mockAppointments","patientName","time","status","mockStats","appointments","patients","pendingReports","mockPatients","firstName","lastName","dateOfBirth","gender","phone","address","bloodType","emergencyContact","relationship","medicalHistory","allergies","medications","insurance","provider","policyNumber","groupNumber","mockNotifications","message","type","DoctorDashboard","_s","doctor","setDoctor","setAppointments","stats","setStats","notifications","setNotifications","fetchData","getBadgeColor","fluid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Header","variant","length","map","appt","Item","bg","_c","$RefreshReg$"],"sources":["C:/Users/rauna/OneDrive/Desktop/v1.0/staff-portal/src/pages/DoctorMain/Appointments.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, ListGroup, Badge } from \"react-bootstrap\";\n\n// ----------------- Mock Data -----------------\nconst mockDoctor = {\n    id: \"123\",\n    name: \"John Doe\",\n    specialization: \"Cardiology\",\n    email: \"john.doe@example.com\",\n};\n\nconst mockAppointments = [\n    { id: 1, patientName: \"Alice Smith\", time: \"09:00 AM\", status: \"Confirmed\" },\n    { id: 2, patientName: \"Bob Johnson\", time: \"10:30 AM\", status: \"Pending\" },\n    { id: 3, patientName: \"Charlie Brown\", time: \"01:00 PM\", status: \"Completed\" },\n    { id: 1, patientName: \"Alice Smith\", time: \"09:00 AM\", status: \"Confirmed\" },\n    { id: 2, patientName: \"Bob Johnson\", time: \"10:30 AM\", status: \"Pending\" },\n    { id: 3, patientName: \"Charlie Brown\", time: \"01:00 PM\", status: \"Completed\" },\n];\n\nconst mockStats = {\n    appointments: 3,\n    patients: 25,\n    pendingReports: 2,\n};\nconst mockPatients = [\n    {\n        id: \"p1\",\n        firstName: \"Alice\",\n        lastName: \"Smith\",\n        dateOfBirth: \"1990-05-12\",\n        gender: \"female\",\n        phone: \"1234567890\",\n        email: \"alice@example.com\",\n        address: \"123 Street, City\",\n        bloodType: \"A+\",\n        emergencyContact: {\n            name: \"Bob Smith\",\n            relationship: \"Spouse\",\n            phone: \"0987654321\"\n        },\n        medicalHistory: [\"Diabetes\", \"Hypertension\"],\n        allergies: [\"Penicillin\", \"Peanuts\"],\n        medications: [\"Metformin\", \"Aspirin\"],\n        insurance: {\n            provider: \"HealthCare Inc.\",\n            policyNumber: \"HC12345\",\n            groupNumber: \"G123\"\n        },\n        status: \"active\"\n    },\n    {\n        id: \"p2\",\n        firstName: \"John\",\n        lastName: \"Doe\",\n        dateOfBirth: \"1985-08-20\",\n        gender: \"male\",\n        phone: \"9876543210\",\n        email: \"john@example.com\",\n        address: \"456 Avenue, City\",\n        bloodType: \"B+\",\n        emergencyContact: {\n            name: \"Jane Doe\",\n            relationship: \"Spouse\",\n            phone: \"1234567890\"\n        },\n        medicalHistory: [\"Asthma\"],\n        allergies: [\"None\"],\n        medications: [\"Albuterol\"],\n        insurance: {\n            provider: \"HealthFirst\",\n            policyNumber: \"HF67890\",\n            groupNumber: \"G678\"\n        },\n        status: \"active\"\n    }\n];\n\n\nconst mockNotifications = [\n    { id: 1, message: \"New lab report submitted for Alice Smith.\", type: \"info\" },\n    { id: 2, message: \"Appointment canceled by Bob Johnson.\", type: \"warning\" },\n];\n\n// ----------------- Dashboard Component -----------------\nconst DoctorDashboard = () => {\n    const [doctor, setDoctor] = useState(null);\n    const [appointments, setAppointments] = useState([]);\n    const [stats, setStats] = useState({});\n    const [notifications, setNotifications] = useState([]);\n\n    useEffect(() => {\n        // Simulate API call\n        const fetchData = async () => {\n            setDoctor(mockDoctor);\n            setAppointments(mockAppointments);\n            setStats(mockStats);\n            setNotifications(mockNotifications);\n        };\n        fetchData();\n    }, []);\n\n    // Function to get badge color based on status/type\n    const getBadgeColor = (status) => {\n        switch (status) {\n            case \"Confirmed\":\n            case \"info\":\n                return \"primary\";\n            case \"Pending\":\n            case \"warning\":\n                return \"warning\";\n            case \"Completed\":\n                return \"success\";\n            default:\n                return \"secondary\";\n        }\n    };\n\n    return (\n        <Container fluid className=\"mt-4\">\n            <h1 className=\"mb-4\">Appointment List</h1>\n\n            {/* Appointments List */}\n            <Card className=\"mb-4\">\n                <Card.Header>Today's Appointments</Card.Header>\n                <ListGroup variant=\"flush\">\n                    {appointments.length > 0 ? (\n                        appointments.map((appt) => (\n                            <ListGroup.Item key={appt.id} className=\"d-flex justify-content-between align-items-center\">\n                                <div>\n                                    <strong>Patient:</strong> {appt.patientName} <br />\n                                    <small>Time: {appt.time}</small>\n                                </div>\n                                <Badge bg={getBadgeColor(appt.status)}>{appt.status}</Badge>\n                            </ListGroup.Item>\n                        ))\n                    ) : (\n                        <ListGroup.Item>No appointments today</ListGroup.Item>\n                    )}\n                </ListGroup>\n            </Card>\n\n            \n\n\n\n        </Container>\n    );\n};\n\nexport default DoctorDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}