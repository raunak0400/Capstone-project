{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('staffToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('staffToken');\n    localStorage.removeItem('staffUser');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Staff Auth API\nexport const staffAuthAPI = {\n  login: credentials => api.post('/staff/auth/login', credentials),\n  logout: () => {\n    localStorage.removeItem('staffToken');\n    localStorage.removeItem('staffUser');\n  }\n};\n\n// Patient API for Staff\nexport const patientAPI = {\n  // Get all patients with search and pagination\n  getPatients: (params = {}) => {\n    const {\n      page = 1,\n      limit = 10,\n      search = '',\n      sortBy = 'createdAt',\n      sortOrder = 'desc'\n    } = params;\n    return api.get('/staff/patients', {\n      params: {\n        page,\n        limit,\n        search,\n        sortBy,\n        sortOrder\n      }\n    });\n  },\n  // Get single patient\n  getPatient: id => api.get(`/staff/patients/${id}`),\n  // Create new patient\n  createPatient: patientData => api.post('/staff/patients', patientData),\n  // Update patient\n  updatePatient: (id, patientData) => api.put(`/staff/patients/${id}`, patientData),\n  // Delete patient\n  deletePatient: id => api.delete(`/staff/patients/${id}`)\n};\n\n// Staff Analytics API\nexport const staffAnalyticsAPI = {\n  // Get dashboard stats for staff\n  getDashboardStats: role => api.get(`/staff/analytics/dashboard/${role}`),\n  // Get gender distribution\n  getGenderDistribution: () => api.get('/staff/analytics/gender'),\n  // Get age distribution\n  getAgeDistribution: () => api.get('/staff/analytics/age'),\n  // Get patients over time\n  getPatientsOverTime: () => api.get('/staff/analytics/patients-over-time')\n};\n\n// Appointment API for Staff\nexport const appointmentAPI = {\n  // Get appointments (staff endpoint)\n  getAppointments: (params = {}) => {\n    const {\n      page = 1,\n      limit = 10,\n      date = '',\n      doctor = '',\n      status = ''\n    } = params;\n    return api.get('/staff/appointments', {\n      params: {\n        page,\n        limit,\n        date,\n        doctor,\n        status\n      }\n    });\n  },\n  // Create appointment\n  createAppointment: appointmentData => api.post('/staff/appointments', appointmentData),\n  // Update appointment\n  updateAppointment: (id, appointmentData) => api.put(`/staff/appointments/${id}`, appointmentData),\n  // Delete appointment\n  deleteAppointment: id => api.delete(`/staff/appointments/${id}`)\n};\n\n// Staff Management API (Admin only)\nexport const staffAPI = {\n  // Get all staff\n  getStaff: (params = {}) => {\n    const {\n      page = 1,\n      limit = 10,\n      role = '',\n      search = ''\n    } = params;\n    return api.get('/admin/staff', {\n      params: {\n        page,\n        limit,\n        role,\n        search\n      }\n    });\n  },\n  // Create staff member\n  createStaff: staffData => api.post('/admin/staff', staffData),\n  // Update staff member\n  updateStaff: (id, staffData) => api.put(`/admin/staff/${id}`, staffData),\n  // Delete staff member\n  deleteStaff: id => api.delete(`/admin/staff/${id}`)\n};\n\n// Pharmacy API\nexport const pharmacyAPI = {\n  // Get prescriptions\n  getPrescriptions: (params = {}) => {\n    const {\n      page = 1,\n      limit = 10,\n      status = '',\n      search = ''\n    } = params;\n    return api.get('/pharmacy/prescriptions', {\n      params: {\n        page,\n        limit,\n        status,\n        search\n      }\n    });\n  },\n  // Update prescription status\n  updatePrescriptionStatus: (id, status) => api.put(`/pharmacy/prescriptions/${id}/status`, {\n    status\n  }),\n  // Get inventory\n  getInventory: () => api.get('/pharmacy/inventory')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","staffAuthAPI","login","credentials","post","logout","patientAPI","getPatients","params","page","limit","search","sortBy","sortOrder","get","getPatient","id","createPatient","patientData","updatePatient","put","deletePatient","delete","staffAnalyticsAPI","getDashboardStats","role","getGenderDistribution","getAgeDistribution","getPatientsOverTime","appointmentAPI","getAppointments","date","doctor","createAppointment","appointmentData","updateAppointment","deleteAppointment","staffAPI","getStaff","createStaff","staffData","updateStaff","deleteStaff","pharmacyAPI","getPrescriptions","updatePrescriptionStatus","getInventory"],"sources":["C:/Users/rauna/OneDrive/Desktop/v1.0/staff-portal/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('staffToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle auth errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('staffToken');\r\n      localStorage.removeItem('staffUser');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Staff Auth API\r\nexport const staffAuthAPI = {\r\n  login: (credentials) => api.post('/staff/auth/login', credentials),\r\n  logout: () => {\r\n    localStorage.removeItem('staffToken');\r\n    localStorage.removeItem('staffUser');\r\n  },\r\n};\r\n\r\n// Patient API for Staff\r\nexport const patientAPI = {\r\n  // Get all patients with search and pagination\r\n  getPatients: (params = {}) => {\r\n    const { page = 1, limit = 10, search = '', sortBy = 'createdAt', sortOrder = 'desc' } = params;\r\n    return api.get('/staff/patients', {\r\n      params: { page, limit, search, sortBy, sortOrder }\r\n    });\r\n  },\r\n\r\n  // Get single patient\r\n  getPatient: (id) => api.get(`/staff/patients/${id}`),\r\n\r\n  // Create new patient\r\n  createPatient: (patientData) => api.post('/staff/patients', patientData),\r\n\r\n  // Update patient\r\n  updatePatient: (id, patientData) => api.put(`/staff/patients/${id}`, patientData),\r\n\r\n  // Delete patient\r\n  deletePatient: (id) => api.delete(`/staff/patients/${id}`),\r\n};\r\n\r\n// Staff Analytics API\r\nexport const staffAnalyticsAPI = {\r\n  // Get dashboard stats for staff\r\n  getDashboardStats: (role) => api.get(`/staff/analytics/dashboard/${role}`),\r\n\r\n  // Get gender distribution\r\n  getGenderDistribution: () => api.get('/staff/analytics/gender'),\r\n\r\n  // Get age distribution\r\n  getAgeDistribution: () => api.get('/staff/analytics/age'),\r\n\r\n  // Get patients over time\r\n  getPatientsOverTime: () => api.get('/staff/analytics/patients-over-time'),\r\n};\r\n\r\n// Appointment API for Staff\r\nexport const appointmentAPI = {\r\n  // Get appointments (staff endpoint)\r\n  getAppointments: (params = {}) => {\r\n    const { page = 1, limit = 10, date = '', doctor = '', status = '' } = params;\r\n    return api.get('/staff/appointments', {\r\n      params: { page, limit, date, doctor, status }\r\n    });\r\n  },\r\n\r\n  // Create appointment\r\n  createAppointment: (appointmentData) => api.post('/staff/appointments', appointmentData),\r\n\r\n  // Update appointment\r\n  updateAppointment: (id, appointmentData) => api.put(`/staff/appointments/${id}`, appointmentData),\r\n\r\n  // Delete appointment\r\n  deleteAppointment: (id) => api.delete(`/staff/appointments/${id}`),\r\n};\r\n\r\n// Staff Management API (Admin only)\r\nexport const staffAPI = {\r\n  // Get all staff\r\n  getStaff: (params = {}) => {\r\n    const { page = 1, limit = 10, role = '', search = '' } = params;\r\n    return api.get('/admin/staff', {\r\n      params: { page, limit, role, search }\r\n    });\r\n  },\r\n\r\n  // Create staff member\r\n  createStaff: (staffData) => api.post('/admin/staff', staffData),\r\n\r\n  // Update staff member\r\n  updateStaff: (id, staffData) => api.put(`/admin/staff/${id}`, staffData),\r\n\r\n  // Delete staff member\r\n  deleteStaff: (id) => api.delete(`/admin/staff/${id}`),\r\n};\r\n\r\n// Pharmacy API\r\nexport const pharmacyAPI = {\r\n  // Get prescriptions\r\n  getPrescriptions: (params = {}) => {\r\n    const { page = 1, limit = 10, status = '', search = '' } = params;\r\n    return api.get('/pharmacy/prescriptions', {\r\n      params: { page, limit, status, search }\r\n    });\r\n  },\r\n\r\n  // Update prescription status\r\n  updatePrescriptionStatus: (id, status) => api.put(`/pharmacy/prescriptions/${id}/status`, { status }),\r\n\r\n  // Get inventory\r\n  getInventory: () => api.get('/pharmacy/inventory'),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC;IACrCT,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACpCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,YAAY,GAAG;EAC1BC,KAAK,EAAGC,WAAW,IAAKxB,GAAG,CAACyB,IAAI,CAAC,mBAAmB,EAAED,WAAW,CAAC;EAClEE,MAAM,EAAEA,CAAA,KAAM;IACZjB,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC;IACrCT,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;EACtC;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAG;EACxB;EACAC,WAAW,EAAEA,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK;IAC5B,MAAM;MAAEC,IAAI,GAAG,CAAC;MAAEC,KAAK,GAAG,EAAE;MAAEC,MAAM,GAAG,EAAE;MAAEC,MAAM,GAAG,WAAW;MAAEC,SAAS,GAAG;IAAO,CAAC,GAAGL,MAAM;IAC9F,OAAO7B,GAAG,CAACmC,GAAG,CAAC,iBAAiB,EAAE;MAChCN,MAAM,EAAE;QAAEC,IAAI;QAAEC,KAAK;QAAEC,MAAM;QAAEC,MAAM;QAAEC;MAAU;IACnD,CAAC,CAAC;EACJ,CAAC;EAED;EACAE,UAAU,EAAGC,EAAE,IAAKrC,GAAG,CAACmC,GAAG,CAAC,mBAAmBE,EAAE,EAAE,CAAC;EAEpD;EACAC,aAAa,EAAGC,WAAW,IAAKvC,GAAG,CAACyB,IAAI,CAAC,iBAAiB,EAAEc,WAAW,CAAC;EAExE;EACAC,aAAa,EAAEA,CAACH,EAAE,EAAEE,WAAW,KAAKvC,GAAG,CAACyC,GAAG,CAAC,mBAAmBJ,EAAE,EAAE,EAAEE,WAAW,CAAC;EAEjF;EACAG,aAAa,EAAGL,EAAE,IAAKrC,GAAG,CAAC2C,MAAM,CAAC,mBAAmBN,EAAE,EAAE;AAC3D,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAG;EAC/B;EACAC,iBAAiB,EAAGC,IAAI,IAAK9C,GAAG,CAACmC,GAAG,CAAC,8BAA8BW,IAAI,EAAE,CAAC;EAE1E;EACAC,qBAAqB,EAAEA,CAAA,KAAM/C,GAAG,CAACmC,GAAG,CAAC,yBAAyB,CAAC;EAE/D;EACAa,kBAAkB,EAAEA,CAAA,KAAMhD,GAAG,CAACmC,GAAG,CAAC,sBAAsB,CAAC;EAEzD;EACAc,mBAAmB,EAAEA,CAAA,KAAMjD,GAAG,CAACmC,GAAG,CAAC,qCAAqC;AAC1E,CAAC;;AAED;AACA,OAAO,MAAMe,cAAc,GAAG;EAC5B;EACAC,eAAe,EAAEA,CAACtB,MAAM,GAAG,CAAC,CAAC,KAAK;IAChC,MAAM;MAAEC,IAAI,GAAG,CAAC;MAAEC,KAAK,GAAG,EAAE;MAAEqB,IAAI,GAAG,EAAE;MAAEC,MAAM,GAAG,EAAE;MAAEpC,MAAM,GAAG;IAAG,CAAC,GAAGY,MAAM;IAC5E,OAAO7B,GAAG,CAACmC,GAAG,CAAC,qBAAqB,EAAE;MACpCN,MAAM,EAAE;QAAEC,IAAI;QAAEC,KAAK;QAAEqB,IAAI;QAAEC,MAAM;QAAEpC;MAAO;IAC9C,CAAC,CAAC;EACJ,CAAC;EAED;EACAqC,iBAAiB,EAAGC,eAAe,IAAKvD,GAAG,CAACyB,IAAI,CAAC,qBAAqB,EAAE8B,eAAe,CAAC;EAExF;EACAC,iBAAiB,EAAEA,CAACnB,EAAE,EAAEkB,eAAe,KAAKvD,GAAG,CAACyC,GAAG,CAAC,uBAAuBJ,EAAE,EAAE,EAAEkB,eAAe,CAAC;EAEjG;EACAE,iBAAiB,EAAGpB,EAAE,IAAKrC,GAAG,CAAC2C,MAAM,CAAC,uBAAuBN,EAAE,EAAE;AACnE,CAAC;;AAED;AACA,OAAO,MAAMqB,QAAQ,GAAG;EACtB;EACAC,QAAQ,EAAEA,CAAC9B,MAAM,GAAG,CAAC,CAAC,KAAK;IACzB,MAAM;MAAEC,IAAI,GAAG,CAAC;MAAEC,KAAK,GAAG,EAAE;MAAEe,IAAI,GAAG,EAAE;MAAEd,MAAM,GAAG;IAAG,CAAC,GAAGH,MAAM;IAC/D,OAAO7B,GAAG,CAACmC,GAAG,CAAC,cAAc,EAAE;MAC7BN,MAAM,EAAE;QAAEC,IAAI;QAAEC,KAAK;QAAEe,IAAI;QAAEd;MAAO;IACtC,CAAC,CAAC;EACJ,CAAC;EAED;EACA4B,WAAW,EAAGC,SAAS,IAAK7D,GAAG,CAACyB,IAAI,CAAC,cAAc,EAAEoC,SAAS,CAAC;EAE/D;EACAC,WAAW,EAAEA,CAACzB,EAAE,EAAEwB,SAAS,KAAK7D,GAAG,CAACyC,GAAG,CAAC,gBAAgBJ,EAAE,EAAE,EAAEwB,SAAS,CAAC;EAExE;EACAE,WAAW,EAAG1B,EAAE,IAAKrC,GAAG,CAAC2C,MAAM,CAAC,gBAAgBN,EAAE,EAAE;AACtD,CAAC;;AAED;AACA,OAAO,MAAM2B,WAAW,GAAG;EACzB;EACAC,gBAAgB,EAAEA,CAACpC,MAAM,GAAG,CAAC,CAAC,KAAK;IACjC,MAAM;MAAEC,IAAI,GAAG,CAAC;MAAEC,KAAK,GAAG,EAAE;MAAEd,MAAM,GAAG,EAAE;MAAEe,MAAM,GAAG;IAAG,CAAC,GAAGH,MAAM;IACjE,OAAO7B,GAAG,CAACmC,GAAG,CAAC,yBAAyB,EAAE;MACxCN,MAAM,EAAE;QAAEC,IAAI;QAAEC,KAAK;QAAEd,MAAM;QAAEe;MAAO;IACxC,CAAC,CAAC;EACJ,CAAC;EAED;EACAkC,wBAAwB,EAAEA,CAAC7B,EAAE,EAAEpB,MAAM,KAAKjB,GAAG,CAACyC,GAAG,CAAC,2BAA2BJ,EAAE,SAAS,EAAE;IAAEpB;EAAO,CAAC,CAAC;EAErG;EACAkD,YAAY,EAAEA,CAAA,KAAMnE,GAAG,CAACmC,GAAG,CAAC,qBAAqB;AACnD,CAAC;AAED,eAAenC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}